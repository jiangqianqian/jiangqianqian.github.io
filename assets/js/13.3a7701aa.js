(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{213:function(e,t,a){"use strict";a.r(t);var n=a(28),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"你需要了解的前后端传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你需要了解的前后端传参"}},[e._v("#")]),e._v(" 你需要了解的前后端传参")]),e._v(" "),a("p",[a("strong",[e._v("前后端传参一般有两种形式：")])]),e._v(" "),a("p",[a("strong",[e._v("key=value")]),e._v(" 形式传参（即 parameter 形式）\n"),a("strong",[e._v("body")]),e._v(" 形式传参（传 json 数据给后端）")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("key=value 形式传参")])])]),e._v(" "),a("p",[a("strong",[e._v("1.")]),e._v(" 如果使用的是 GET 请求，浏览器展示的 Request URL 会自动在路径后面加上 ?a=1&b=2这样的参数，这就是 key=value 形式传参, 在控制台看到的参数形式是 “Query String Parameters”，后端解析时是用 querystring.parse 进行处理。")]),e._v(" "),a("p",[e._v("axios 请求示例")]),e._v(" "),a("div",{staticClass:"language-(js) extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import request from 'axios'\n\n...\n\nsomeInterface (params) {\n  return request({\n    url: '请求路径',\n    method: 'GET',\n    params\n  })\n},\n")])])]),a("p",[e._v("浏览器关于 GET 请求的呈现：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/p1.jpeg",alt:"图片描述"}})]),e._v(" "),a("p",[a("strong",[e._v("2.")]),e._v(" 如果发送 POST 请求，对传参进行如下处理，则在控制台看到的参数形式是 “Form Data”，而且浏览器会自动将 Request Headers 的 Content-Type 设置为 application/x-www-form-urlencoded, 这种也是  key=value 形式传参， 后端解析时是用 querystring.parse 进行处理。")]),e._v(" "),a("p",[e._v("处理方式1：")]),e._v(" "),a("div",{staticClass:"language-(js) extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import request from 'axios'\nimport qs from 'qs'\n\n...\n\nsomeInterface (params) {\n  return request({\n    url: '请求路径',\n    method: 'POST',\n    data: qs.stringify(params)\n  })\n},\n\n")])])]),a("p",[e._v("处理方式2：")]),e._v(" "),a("div",{staticClass:"language-(js) extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import request from 'axios'\nimport qs from 'qs'\n\n...\n\nsomeInterface (params) {\n    return request({\n      url: '请求路径',\n      method: 'POST',\n      data: params,\n      transformRequest: [(data) => {\n        let ret = ''\n        for (let it in data) {\n          ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n        }\n        return ret\n      }]\n    })\n  },\n\n")])])]),a("p",[e._v("浏览器呈现：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/p2.jpeg",alt:"clipboard.png"}})]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("body 形式传参")])])]),e._v(" "),a("p",[e._v('如果发送 POST、PUT、PATCH 等请求，若 content-type 为 application/json（使用 axios 发送这些请求时，浏览器 Request Headers 的 Content-Type 没显示出，则默认为 application/json），在控制台中看到的参数形式叫做 "Request payload"，后端解析用 body-parser 来处理')]),e._v(" "),a("p",[e._v("axios 请求示例")]),e._v(" "),a("div",{staticClass:"language-(js) extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import request from 'axios'\n\n    ...\n\n    someInterface (params) {\n      return request({\n        url: '请求路径',\n        method: 'POST',\n        data: params\n      })\n    },\n")])])]),a("p",[e._v("浏览器呈现：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/p3.jpeg",alt:"clipboard.png"}})]),e._v(" "),a("p",[a("strong",[e._v("另外")]),e._v('，jquery 的 ajax 请求中当 type 为 POST 时，会将 contentType统一处理成:\n"application/x-www-form-urlencoded; charset=UTF-8", 所以使用的是 Form Data 这种传参形式，我测试时目前没看到过有 Request payload 这种形式的。')]),e._v(" "),a("p",[a("strong",[e._v("总之")]),e._v("，method 用 GET 还是 POST 是后端定义好的，前端写死就好，至于是 key=value 还是 body 形式，要看后端是什么方式来解析，并非 method  为 POST, 就一定要用 body 形式，也可以是 key=value 形式。qs.stringify 可以转化成 key=value 形式（即将参数对象序列化成 URL 的形式，以&进行拼接）。")])])}),[],!1,null,null,null);t.default=r.exports}}]);